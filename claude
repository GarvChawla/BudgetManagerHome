import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import wave from "D:/Web Dev/Money-Mate/PAID GPT/1/BudgetManagerClone/src/pages/wave.svg";
import { ToastContainer, toast } from 'react-toastify';
import { jsPDF } from 'jspdf';
import { HomeIcon, PlusCircle, Trash2, LogOut } from 'lucide-react';
import 'react-toastify/dist/ReactToastify.css';

const Dashboard = () => {
  const [currency, setCurrency] = useState('USD');
  const [budgetName, setBudgetName] = useState('');
  const [budgetAmount, setBudgetAmount] = useState('');
  const [budgets, setBudgets] = useState([]);
  const [expenseName, setExpenseName] = useState('');
  const [expenseAmount, setExpenseAmount] = useState('');
  const [selectedBudget, setSelectedBudget] = useState('');
  const [recentExpenses, setRecentExpenses] = useState([]);
  const [username, setUsername] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    const currentUser = JSON.parse(localStorage.getItem('currentUser'));
    if (currentUser) {
      setUsername(currentUser.username);
      const userBudgets = JSON.parse(localStorage.getItem(`budgets_${currentUser.id}`)) || [];
      setBudgets(userBudgets);

      const allExpenses = userBudgets.flatMap((budget) =>
        budget.expenses.map((expense) => ({ ...expense, budgetName: budget.name }))
      );
      setRecentExpenses(allExpenses.sort((a, b) => new Date(b.date) - new Date(a.date)).slice(0, 5));
    } else {
      navigate('/login');
    }
  }, [navigate]);

  const saveBudgets = (updatedBudgets) => {
    const currentUser = JSON.parse(localStorage.getItem('currentUser'));
    localStorage.setItem(`budgets_${currentUser.id}`, JSON.stringify(updatedBudgets));
  };

  const handleDeleteUser = () => {
    const currentUser = JSON.parse(localStorage.getItem('currentUser'));
    if (currentUser) {
      localStorage.removeItem(`budgets_${currentUser.id}`);
      localStorage.removeItem('currentUser');
      setBudgets([]);
      setRecentExpenses([]);
      toast.success('User deleted successfully!', { position: 'top-right', autoClose: 3000 });
      navigate('/login');
    }
  };

  const handleLogout = () => {
    localStorage.removeItem('currentUser');
    toast.info('Logged out successfully!', { position: 'top-right', autoClose: 3000 });
    navigate('/login');
  };

  const handleViewDetails = (budget) => {
    navigate(`/budget-details/${budget.id}`, { state: { budget } });
  };

  const handleCreateBudget = () => {
    if (!budgetName || !budgetAmount || !currency) {
      toast.error('Please fill out all fields.', { position: 'top-right', autoClose: 3000 });
      return;
    }

    const newBudget = {
      id: Date.now(),
      name: budgetName,
      amount: parseFloat(budgetAmount),
      spent: 0,
      expenses: [],
    };

    const updatedBudgets = [...budgets, newBudget];
    saveBudgets(updatedBudgets);
    setBudgets(updatedBudgets);
    setBudgetName('');
    setBudgetAmount('');

    toast.success('Budget created successfully!', { position: 'top-right', autoClose: 3000 });
  };

  const handleAddExpense = () => {
    if (!expenseName || !expenseAmount || (!selectedBudget && budgets.length > 1)) {
      toast.error('Please fill out all fields.', { position: 'top-right', autoClose: 3000 });
      return;
    }

    const targetBudget = budgets.length === 1 ? budgets[0] : budgets.find((budget) => budget.name === selectedBudget);
    if (!targetBudget) {
      toast.error('Please select a valid budget.', { position: 'top-right', autoClose: 3000 });
      return;
    }

    const newExpense = {
      id: Date.now(),
      name: expenseName,
      amount: parseFloat(expenseAmount),
      date: new Date().toLocaleDateString(),
    };

    const updatedBudgets = budgets.map((budget) => {
      if (budget.id === targetBudget.id) {
        budget.expenses.push(newExpense);
        budget.spent += newExpense.amount;
      }
      return budget;
    });

    saveBudgets(updatedBudgets);
    setBudgets(updatedBudgets);
    setExpenseName('');
    setExpenseAmount('');

    const newRecentExpenses = [{ ...newExpense, budgetName: targetBudget.name }, ...recentExpenses].slice(0, 5);
    setRecentExpenses(newRecentExpenses);

    toast.success('Expense added successfully!', { position: 'top-right', autoClose: 3000 });
  };

  const handleDeleteBudget = (budgetId) => {
    const updatedBudgets = budgets.filter((budget) => budget.id !== budgetId);
    saveBudgets(updatedBudgets);
    setBudgets(updatedBudgets);

    setRecentExpenses((prev) => prev.filter((expense) => expense.budgetId !== budgetId));
    toast.info('Budget deleted successfully!', { position: 'top-right', autoClose: 3000 });
  };

  const handleDeleteExpense = (budgetId, expenseId) => {
    const updatedBudgets = budgets.map((budget) => {
      if (budget.id === budgetId) {
        budget.expenses = budget.expenses.filter((expense) => expense.id !== expenseId);
        budget.spent = budget.expenses.reduce((sum, expense) => sum + expense.amount, 0);
      }
      return budget;
    });

    saveBudgets(updatedBudgets);
    setBudgets(updatedBudgets);
    setRecentExpenses((prev) => prev.filter((expense) => expense.id !== expenseId));

    toast.info('Expense deleted successfully!', { position: 'top-right', autoClose: 3000 });
  };

  const downloadCSV = () => {
    if (budgets.length === 0) return;

    let csvContent = [];
    let headers = ['Budget Name', 'Total Amount', 'Spent Amount', 'Remaining Amount'];
    
    // Add expense-related headers only if there are expenses
    const hasExpenses = budgets.some(budget => budget.expenses.length > 0);
    if (hasExpenses) {
      headers = [...headers, 'Expense Name', 'Expense Amount', 'Date'];
    }
    
    csvContent.push(headers);

    budgets.forEach(budget => {
      if (budget.expenses.length === 0) {
        // If no expenses, just add budget information
        csvContent.push([
          budget.name,
          budget.amount,
          budget.spent,
          budget.amount - budget.spent
        ]);
      } else {
        // If there are expenses, add a row for each expense
        budget.expenses.forEach(expense => {
          csvContent.push([
            budget.name,
            budget.amount,
            budget.spent,
            budget.amount - budget.spent,
            expense.name,
            expense.amount,
            expense.date
          ]);
        });
      }
    });

    const csvString = csvContent.map(row => row.join(',')).join('\n');
    const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.setAttribute('download', `budget_report_${new Date().toLocaleDateString()}.csv`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const downloadPDF = () => {
    if (budgets.length === 0) return;

    const doc = new jsPDF();
    let yOffset = 20;
    const pageHeight = doc.internal.pageSize.height;
    
    // Add title
    doc.setFontSize(16);
    doc.text(`Budget Report for ${username}`, 10, 10);
    
    // Add date
    doc.setFontSize(10);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 10, yOffset);
    yOffset += 10;

    budgets.forEach((budget, index) => {
      // Check if we need a new page
      if (yOffset > pageHeight - 20) {
        doc.addPage();
        yOffset = 20;
      }

      // Add budget header
      doc.setFontSize(12);
      doc.setFont(undefined, 'bold');
      doc.text(`Budget: ${budget.name}`, 10, yOffset);
      yOffset += 7;

      // Add budget details
      doc.setFontSize(10);
      doc.setFont(undefined, 'normal');
      doc.text(`Total Amount: ${currency} ${budget.amount.toFixed(2)}`, 15, yOffset);
      yOffset += 5;
      doc.text(`Spent Amount: ${currency} ${budget.spent.toFixed(2)}`, 15, yOffset);
      yOffset += 5;
      doc.text(`Remaining Amount: ${currency} ${(budget.amount - budget.spent).toFixed(2)}`, 15, yOffset);
      yOffset += 10;

      // Add expenses if they exist
      if (budget.expenses.length > 0) {
        doc.setFont(undefined, 'bold');
        doc.text('Expenses:', 15, yOffset);
        yOffset += 5;
        doc.setFont(undefined, 'normal');

        budget.expenses.forEach((expense) => {
          // Check if we need a new page
          if (yOffset > pageHeight - 20) {
            doc.addPage();
            yOffset = 20;
          }
          
          doc.text(`- ${expense.name}: ${currency} ${expense.amount.toFixed(2)} (${expense.date})`, 20, yOffset);
          yOffset += 5;
        });
      }
      
      yOffset += 10; // Add space between budgets
    });

    doc.save(`budget_report_${new Date().toLocaleDateString()}.pdf`);
  };

  return (
    <div className="min-h-screen bg-gray-50 dashboard-transition">
      <ToastContainer />
      {/* Navbar */}
      <nav className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center">
              <HomeIcon className="h-8 w-8 text-cyan-500" />
              <span className="ml-2 text-xl font-semibold">MoneyMate</span>
            </div>
            <div className="flex items-center space-x-4">
              <select
                className="px-3 py-2 border rounded-md"
                value={currency}
                onChange={(e) => setCurrency(e.target.value)}
              >
                <option value="USD">USD</option>
                <option value="EUR">EUR</option>
                <option value="INR">INR</option>
              </select>
              <button 
                onClick={handleDeleteUser} 
                className="text-red-500 flex items-center"
              >
                <Trash2 className="h-5 w-5 mr-1" />
                Delete User
              </button>
              <button 
                onClick={handleLogout} 
                className="text-gray-700 flex items-center"
              >
                <LogOut className="h-5 w-5 mr-1" />
                Logout
              </button>
            </div>
          </div>
        </div>
      </nav>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <h1 className="text-4xl font-bold mb-8">
          Welcome back, <span className="text-cyan-500">{username}</span>
        </h1>

        <div className="grid md:grid-cols-2 gap-6 mb-8">
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <h2 className="text-xl font-semibold mb-4">Create budget</h2>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Budget Name</label>
                <input
                  type="text"
                  placeholder="e.g., Groceries"
                  className="w-full px-3 py-2 border rounded-md"
                  value={budgetName}
                  onChange={(e) => setBudgetName(e.target.value)}
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">Amount</label>
                <input
                  type="number"
                  placeholder="e.g., 350"
                  className="w-full px-3 py-2 border rounded-md"
                  value={budgetAmount}
                  onChange={(e) => setBudgetAmount(e.target.value)}
                />
              </div>
              <button
                onClick={handleCreateBudget}
                className="flex items-center bg-gray-900 text-white px-4 py-2 rounded-md hover:bg-gray-800"
              >
                <PlusCircle className="h-5 w-5 mr-2" />
                Create budget
              </button>
            </div>
          </div>

          {budgets.length > 0 && (
            <div className="bg-white rounded-lg shadow-sm border p-6">
              <h2 className="text-xl font-semibold mb-4">Add New Expense</h2>
              <div className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Expense Name</label>
                    <input
                      type="text"
                      placeholder="e.g., Coffee"
                      className="w-full px-3 py-2 border rounded-md"
                      value={expenseName}
                      onChange={(e) => setExpenseName(e.target.value)}
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Amount</label>
                    <input
                      type="number"
                      placeholder="e.g., 3.50"
                      className="w-full px-3 py-2 border rounded-md"
                      value={expenseAmount}
                      onChange={(e) => setExpenseAmount(e.target.value)}